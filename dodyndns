#!/usr/bin/env python3


# dodydns
# update script for dynamic DNS hostname to the Digital Ocean nameservers

# modules
# requests:     interaction with web API
# sys:          exit on error
# dns.resolver: lookup IP address via opendns
import requests
import sys
import dns.resolver


# user configurable data
API_TOKEN_FN = ".token"
API_DOMAIN = "sherms.co.uk"

# shouldn't change
API_ENDPOINT = "https://api.digitalocean.com/v2/domains/"


def get_ext_ip_opendns():
    '''
    Use the OpenDNS servers to get the
    public-facing IP address of the WAN interface
    '''
    resolver = dns.resolver.Resolver()
    resolver.nameservers = ["208.67.220.220"]
    results = resolver.query('myip.opendns.com')
    ip = [result.to_text() for result in results][0]
    return ip


def get_dns_ip():
    '''
    Returns the current public resolvable DNS
    name of the user-configured domain
    '''
    import socket
    return socket.gethostbyname(API_DOMAIN)


# does the current resolvable IP match the external IP?
if get_dns_ip() == get_ext_ip_opendns():
    print("DNS record already matches external IP")
    sys.exit()

dyn_ip_addr = get_ext_ip_opendns()

# read DO API token file
with open(API_TOKEN_FN, 'r') as f:
    api_token = f.readline().strip()
# build the headers
http_headers = {"Authorization": "Bearer " + api_token}

# does the domain exist on the DO DNS servers?
try:
    r = requests.get(
            API_ENDPOINT + API_DOMAIN, headers=http_headers
            ).json()['domain']
except (KeyError, ValueError):
    print("Domain " + API_DOMAIN + " can't be found on the nameserver")
    sys.exit(-1)

# get the Digital Ocean ID of the A record
a_record_id = None
s = requests.get(API_ENDPOINT + API_DOMAIN + "/records", headers=http_headers)
for i in s.json()['domain_records']:
    if i['type'] == 'A':
        a_record_id = i['id']
        break
# a_record_id will remain None if no A record found

# Update the correct record with the desired IP address
if a_record_id:
    print("Updating A record")
    u = requests.put(
            API_ENDPOINT + API_DOMAIN + '/records/' + str(a_record_id),
            headers=http_headers,
            data='data: ' + dyn_ip_addr
            )
else:
    print("No A record exists on the nameserver for this domain")
    print("Creating a new record")
    c = requests.post(
            API_ENDPOINT + API_DOMAIN + "/records",
            headers=http_headers,
            data={"type": "A", "name": "@", "data": dyn_ip_addr}
            )
